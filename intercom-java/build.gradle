buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'
    classpath 'org.ajoberstar:gradle-git:0.10.0'
  }
}

import org.ajoberstar.grgit.Grgit
import java.text.SimpleDateFormat


apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.7
targetCompatibility = 1.7

//configurations {
//  published
//}

//noinspection GroovyAssignabilityCheck
dependencies {
  compile 'com.fasterxml.jackson.core:jackson-core:2.4.2'
  compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.2'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.4.2'
  compile 'com.google.guava:guava:17.0'
  compile 'org.slf4j:slf4j-api:1.7.7'
  compile 'commons-codec:commons-codec:1.9'
  testCompile 'junit:junit:4.11'
}


repositories {
  jcenter()
  mavenCentral()
}


final globalVersion = new Version(version)
def rawVersion = version

group = 'io.intercom'
version = globalVersion
status = version.status
ext.publish = true


task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar {
        classifier "sources"
      }

      artifact javadocJar {
        classifier "javadoc"
      }
    }
  }
}


//if (project.plugins.hasPlugin('java')) {
//  configurations {
//    published
//  }
//  dependencies {
//    testCompile 'junit:junit:4.11'
//  }
//  task sourceJar(type: Jar) {
//    from sourceSets.main.allSource
//    classifier = 'sources'
//  }
//  task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//  }
//  artifacts {
//    published sourceJar
//    published javadocJar
//  }
//}


bintray {
  // gradle apslodes if the bintray* props aren't found and we never run this task in circle
  if (System.getenv('release') != null) {
    user = bintrayUser
    key = bintrayKey
  }
  publications = ['mavenJava']
  dryRun = false
  publish = project.publish
  pkg {
    repo = 'intercom-maven'
    userOrg = 'intercom'
    name = 'intercom-java'
    desc = 'Java bindings for the Intercom API'
    websiteUrl = 'https://github.com/intercom/intercom-java'
    issueTrackerUrl = 'https://github.com/intercom/intercom-java/issues'
    vcsUrl = 'https://github.com/intercom/intercom-java.git'
    licenses = ['Apache-2.0']
    labels = ['intercom', 'java', 'api']
    publicDownloadNumbers = true
    //noinspection GroovyAssignabilityCheck
    version {
      name = globalVersion
      vcsTag = globalVersion
    }
  }
}



class Version {
  // snapshot to tstamped version via from https://github.com/bintray/bintray-examples
  String originalVersion
  String thisVersion
  String status
  Date buildTime

  Version(String versionValue) {
    buildTime = new Date()
    originalVersion = versionValue
    if (originalVersion.endsWith('-SNAPSHOT')) {
      status = 'integration'
      thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
    } else {
      status = 'release'
      thisVersion = versionValue
    }
  }

  String getTimestamp() {
    // Convert local file timestamp to UTC
    def format = new SimpleDateFormat('yyyyMMddHHmmss')
    format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
    return format.format(buildTime)
  }

  String toString() {
    thisVersion
  }
}

ext.repo = Grgit.open(project.file('..'))

task printVersion << {
  println "publication version: ${globalVersion}"
  println "raw version: ${rawVersion}"
}

task tagRelease << {
  repo.tag.add {
    name = globalVersion
    message = "Release of ${rawVersion}"
  }
  repo.push(tags: true)
}

/*
  export release=1 && gradle publishRelease
*/

//task publishRelease(dependsOn: ['clean', 'tagRelease', 'bintrayUpload'])
//tagRelease.mustRunAfter clean
//bintrayUpload.mustRunAfter tagRelease
